# presentation.py
# A presentation app for codeBoot
# 2024 - Marc-André Bélanger

# presentation.py app metadata
# This metadata will be put into the page's header to allow for better debugging
DEBUG = True
VERSION = "140624-1"
#UUID = \window.crypto.randomUUID()

from js import console
from markdown import split_markdown, parse_front_matter

# 'new' is not supported by the grammar
converter = host_eval("new showdown.Converter()")
converter.setOption('parseImgDimensions', True)
console.log(converter)

getCodeBootVM = \getCodeBootVM

vm = getCodeBootVM()
cb = \CodeBoot.prototype.cb
vms = cb.vms

# List of slides to render. We could discover based on file name.
def get_slides():
    slides = []
    i = 1
    while True:
        try:
            slides.append(read_file("slide_" + str(i) + ".md"))
            i += 1
        except:
            break
    return (i-1, slides)

pres_div = document.createElement("div")
pres_div.classList.add("presentation")
pres_div.id = "slides"

def el_with_class(el, cls):
    """Create an element 'el' with class 'cls'"""
    el = document.createElement(el)
    el.classList.add(cls)
    return el

def generate_slide(markdown, id):
    global converter, n_slides

    template = read_file("template.html")

    slide_id = "slide_" + str(id+1)

    # Split the markdown for processing
    front_matter, title, subtitle, content = split_markdown(markdown)

    # TODO Add logic for this
    if front_matter:
        front_matter = parse_front_matter(front_matter)

    main_content = converter.makeHtml(content)

    params = {
        "slide_id": slide_id,
        "active": "active" if id == 0 else "",
        "margin_left": "",
        "margin_right": "",
        "footer_right": str(id + 1) + "/" + str(n_slides),
        "title": title,
        "subtitle": subtitle,
        "main_content": main_content
    }

    slide_div = HTMLElement_from_html(template.format(params))

    document.querySelector('.presentation').appendChild(slide_div)

def postprocess(actions):
    """Post-process each slide by applying actions on the slide element."""
    global n_slides
    for i in range(1, n_slides + 1):
        slide = document.querySelector("#slide_" + str(i))
        for action in actions:
            action(slide, i)

def action_populate_code_elements(slide, i):
    """Populates code elements with code from the codeBoot filesystem if
    the first line is a filename ending in '.py'.

    `inline code`

    vs

    ```
    file_name.py
    ```
    """
    global cb, vm, vms, examples_vm
    elts = slide.querySelectorAll("code")
    for el in elts:
        parent = el.parentElement # pre element generated by showdown
        parent.style.display = "inline-block"
        file_name = el.innerHTML.split("\n")[0]

        if file_name[-3:] == ".py":
            div = document.createElement('div')
            div.id = file_name

            # Read the file contents
            content = read_file(file_name)

            def last(file, div=div, content=content, parent=parent, file_name=file_name):
                """Callback passed to createFileNoClobber"""
                fe = file['fe']
                # We must first enable the file editor
                fe.enable()
                file.setReadOnly(True)

                width, height = get_wh(content)
                html = fe.textEditor.toHTML()

                # Populate with the CodeMirror-generated HTML code
                div.innerHTML = html
                div.classList.add("cb-example-code")

                add_floating_icon(div, file_name)

            # Create the file in the examples VM
            # NOTE: Don't pass {} as opts since it will pass an object with
            # the runtime dict key to CodeBootFile, poisoning it. Find
            # a better fix.
            examples_vm.fs.createFileNoClobber(file_name, content, None, ".py", last)

            # FIXME: Il semble que l'incantation ci-haut empoisonne les objets
            # résultants. Le {} est converti en dict et tagué, mais createFile
            # copie tous les attributs du paramètre opts vers l'objet créé,
            # il hérite donc sans le vouloir de l'attribut dict
            parent.replaceWith(div)
            #el.replaceWith(div)
        else:
            # Just colorize the code
            code = el.innerHTML
            \CodeMirror.runMode(`code, "python", `el)
            \CodeMirror.colorize(`el.children, "python")

def add_floating_icon(div, file_name):
    btn = HTMLElement_from_html('<button class="btn btn-secondary cb-button" type="button"></button>')
    btn.onclick = lambda evt: open_example_file(file_name)
    svg = HTMLElement_from_html(vm.getImage('clone'))
    btn.style.position = "absolute"
    btn.style.top = "0px"
    btn.style.right = "0px"
    btn.appendChild(svg)
    div.appendChild(btn)

def open_example_file(file_name):
    global examples_vm
    examples_vm.fs.openFile(file_name)
    examples_vm.toggleHidden()

def HTMLElement_from_html(html, strip=True):
    # TODO: Put in its own library
    html = html.strip() if strip else html

    if not html: return None

    template = document.createElement("template")
    template.innerHTML = html
    result = template.content.children

    if len(result) == 1:
        return result[0]
    return result

def get_wh(code):
    """Calculate the number of lines (height) and maximum line length (width)
    of a piece of code."""
    lines = code.split("\n")
    height = "calc(" + str(round(len(lines) * 1.5)) + " * 18px)"
    width = "calc(" + str(round(max(map(len, lines)) * 1.5)) + " * 18px)"

    # The line height is 1.4 + some room
    # Char pixel width will be 1px * 1em
    return width, height

def show_slide(i):
    slide = document.querySelector('#slide_' + str(i))
    slide.classList.add("active")
    if slide.dataset.hasOwnProperty('cbVmIds'):
        ids = slide.dataset.cbVmIds
        refresh_vm(slide, ids)

def hide_slide(i):
    slide = document.querySelector('#slide_' + str(i))
    slide.classList.remove("active")

#vms = \CodeBoot.prototype.cb.vms
def refresh_vm(slide, ids):
    """Refresh VMs on first draw."""
    global vms
    if slide.dataset.hasOwnProperty('cbVmRefreshed'):
        return
    # A slide can contain multiple VMs
    for id in ids.split(","):
        vms["#"+id].refresh()
    slide.dataset.cbVmRefreshed = True

current_slide = 1

def move_slide(back=False):
    global n_slides
    def move(inc):
        global current_slide
        hide_slide(current_slide)
        current_slide += inc
        show_slide(current_slide)
    if back:
        if current_slide > 1:
            move(-1)
    else:
        if current_slide < n_slides:
            move(1)

n_slides, slides = get_slides()
next_slide = lambda evt: move_slide()
last_slide = lambda evt: move_slide(True)

def set_css():
    css = read_file("pres.css")
    style = document.getElementById("presentation_css")
    if style is None:
        style = document.createElement("style")
        style.id = "presentation_css"
        style.innerHTML = css
        document.head.appendChild(style)
        return
    style.innerHTML = css

def set_metadata():
    global VERSION
    meta = document.createElement('meta')
    meta.name = "cb-presentation-version"
    meta.content = VERSION
    document.head.appendChild(meta)

actions = [
    action_populate_code_elements
]

def onkeydown(evt):
    global next_slide, last_slide, vm
    c = evt.code
    if c == "ArrowLeft":
        move_slide(True)
    elif c == "ArrowRight":
        move_slide()
    elif c == "KeyC":
        return
        vm.toggleHidden()

def init():
    #playground.appendChild(pres_div)
    document.body.insertAdjacentElement('beforeend', pres_div)
    # Required for the element to be selectable
    pres_div.setAttribute("tabindex", 0)
    document.body.onkeydown = onkeydown
    set_css()
    set_metadata()
    setup_examples_vm()
    n_slides, slides = get_slides()
    for slide_id, markdown in enumerate(slides):
        generate_slide(markdown, slide_id)
    postprocess(actions)
    vm.setHidden()
    pres_div.focus()
    # TODO: Do we want to observe on document.body or just the html window?
    #document.body.innerHTML = "<button onclick='print(event)'>Foobar</button>" + document.body.innerHTML

def setup_examples_vm():
    global examples_vm
    root = document.createElement("div")
    root.classList.add("cb-vm")
    root.id = "cb-examples-vm"

    opts = {
        "root": root,
        "hidden": True,
        "showLineNumbers": True,
        "cloned": True,
        "floating": True,
        "embedded": True,
        "showEditors": True
    }

    document.body.appendChild(root)

    examples_vm = host_eval("(x) => new CodeBootVM(x)")(opts)

init()

"""
TODO:

- Allow exporting to PDF
- Find out why \getEventListeners does not work (builtin, native code)
- Write a codeboot python module with a clean API (would actually help
  documenting codeBoot itself)
"""
